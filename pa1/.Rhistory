str(plantss)
str(plants)
1
swirl()
sample()
SKIP()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
getwd()
getwd()
setwd("Programming/R/ShinyProj/")
source("app.R")
runApp()
runApp()
runApp()
runApp()
runApp(p)
runApp()
quartz()
str(quartz)
?quartz
?quartz.options
runApp()
run
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp
runApp()
runApp()
runApp()
runApp(p)
runApp()
runApp()
runApp(p)
runApp()
runApp()
runApp()
xx <- as.data.frame(futures_data)
xxx <- cbind.data.frame(x=xx$Corn, y=as.Date(rownames(xx)) )
head(xxx)
x4 <- sapply(xxx, cumsum)
x4 <- sapply(xx$Corn, cumsum)
head(x4)
x4 <- cumsum(xx)
x4
head(x4)
x4 <- cumsum(xx$Corn)
head(x4)
head(xx$Corn)
runApp()
ruanp
runApp()
runApp()
runApp()
ruan
runApp()
runApp()
ruan
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
futures_data
subset(futures, Corn)
subset(futures_data, Corn)
subset(futures_data, "corn")
subset(futures_data, "Corn")
subset(futures_data, select="Corn")
subset(futures_data, select=corn)
subset(futures_data, select=Corn)
runApp()
ruan
runApp()
runApp()
runApp()
runApp()
?cuts
?cut
?seq
source("app/ui.R", local=TRUE)
source("app/server.R")
shinyApp( ui=ui, server=server )
runApp()
ruan
runApp()
runApp()
ls
?browser
runApp()
future
colnames(future)
input$futureInput
subset(futures, select="Corn")
head(subset(futures, select="Corn"))
head(subset(futures, select=Corn))
head(subset(futures, select=input$futureInput))
cumsum(future)
head(cbind.data.frame(x=future, y=as.Date=rownnames(future)))
ll <- head(cbind.data.frame(x=future, y=as.Date=rownnames(future)))
ll <- head(cbind.data.frame(x=future, y=as.Date=rownames(future)))
head(cbind.data.frame(future, as.Date=rownames(future)))
ll <- head(cbind.data.frame(x=future, y=as.Date(rownames(future))))
ll
gvisLineChart(data=ll, x="y", y="x")
gvisLineChart(data=ll, x=;;[,1], y=[,2])
gvisLineChart(data=ll, x=[,1], y=[,2])
gvisLineChart(data=ll, x=ll[,1], y=ll[,2])
gvisLineChart(data=ll, x=Corn, y="y")
head(ll))
head(ll))
head(ll)
gvisLineChart(data=ll, x="Corn", y="y")
ll <- head(cbind.data.frame(x=future, y=as.Date(rownames(future))))
ll
cumulative
ll
gvisLineChart(data=future, x=as.Date(rownames(future)), y=future)
gvisLineChart(data=future, x=as.Date(rownames(future), "%Y/%d/%m"), y=future)
var <- as.Date(rownames(future))
var()
var
gvisLineChart(data=future, x=var, y=future)
class(var)
q
exit
runApp()
runApp()
?sliderInput
?selectInput
?sliderInput
head(futures_data, 2)
head(rownames(futures), 2)
head(rownames(futures_data), 2)
tail(rownames(futures_data), 2)
runApp()
runApp()
runApp()
runApp()
runApp()
ruan
runApp()
?sliderInput
head(rownames(futures_data), 2)
runApp()
runApp()
runApp()
runApp()
runApp()
head(subset(as.data.frame(futures_data), rownames(futures_data) %in% as.Date("2001-01-03","%Y-%m-%d")))
head(subset(as.data.frame(futures_data), rownames(futures_data) %in% as.Date("2001-01-04","%Y-%m-%d")))
head(rownames(as.data.frame(futures_data)))
v1 <- as.data.frame(head(futures_data))
subset(v1, rownames(v1)%in% as.Date("2001-01-03","%Y-%m-%d"))
subset(v1, rownames(v1)%in% as.Date("2001-01-03","%Y-%m-%d"), select=Corn)
help(%in%)
?%in%
help("%in%")
runApp()
runApp()
runApp()
input$dateInput
class(input$dateInput)
input$dateInput[1]
runApp()
runApp()
runApp()
ff <- subset(futures, rownames(futures) %in% seq(from=input))
head(seq(from=input$dateInput[1], to=input$dateInput[2], by="day"))
ff <- head(seq(from=input$dateInput[1], to=input$dateInput[2], by="day"))
rownames(futures) %in% ff
as.Date(rownames(futures)) %in% ff
as.Date(rownames(futures)) %in% ffc
runApp()
runApp()
clear(ls())
install.packages("devtools")
dev_tools::install_github("robjhyndman/M4Metalearning")
devtools::install_github("robjhyndman/M4Metalearning")
load(M4metalearning)
devtools::install_github("pmontman/tsfeatures")
install.packages('rsconnect')
5ff6241a2e42e
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File data/M4DataSet/Daily-train.csv is 121.81 MB; this exceeds GitHub's file size limit of 100.00 MB
remote: error: File data/M4DataSet/Monthly-train.csv is 205.43 MB; this exceeds GitHub's file size limit of 100.00 MB
To https://github.com/Yiorgoss/M4-methods-shiny.git
rsconnect::setAccountInfo(name='yiorgoss', token='A3AAEB5CAAA0B4C797ACB964DD8AC9E9', secret='B7ccZb9JIcajFfVnd5hXeks76l17vJ8hcatKRecU')
library(rsconnect)
rsconnect::deployApp('app.R')
rsconnect::deployApp('../ShinyProj/')
rsconnect::deployApp('../ShinyProj/')
rsconnect::deployApp('../ShinyProj/')
rsconnect::deployApp('../ShinyProj')
install.packages('KernSmooth R')
install.packages('KernSmooth')
load(KernSmooth)
load(KernSmooth R)
str(cor)
getwd()
setwd("../datasciencecoursera/pa1")
source('air_poll.R')
str(poll_mean)
poll_mean()
source("air_poll.R")
poll_mean
poll_mean()
do.call("rbind", lapply(read.csv("specdata/*.csv")))
file_list <- list.files(spec.ar())
file_list <- list.files("specdata")
head(file_list)
do.call("rbind", lapply(file_list, function(x), read.csv(paste(x,sep=""))))
do.call("rbind", lapply(file_list, function(x) read.csv(paste(x,sep=""))))
data <- do.call("rbind", lapply(file_list, function(x) read.csv(paste("specdata/", x,sep=""))))
head data
head(data)
data <- do.call("rbind", lapply(file_list, function(x) read.csv(paste("specdata/", x,sep=""), stringsAsFactors = FALSE)))
data <- do.call("rbind", lapply(file_list, function(x) read.csv(paste("specdata/", x,sep=""), stringsAsFactors = TRUE)))
str(data)
data <- do.call("rbind", lapply(file_list, function(x) read.csv(paste("specdata/", x,sep=""), stringsAsFactors = FALSE)))
str(data)
cor(data$sulfate, data$nitrate)
dd <- complete.cases(data)
head(dd)
dd <- data[complete.cases(data)]
dd <- data[complete.cases(data$sulfate)]
dd <- data[complete.cases(data$sulfate),]
head(dd)
dd <- data[complete.cases(data),]
head(dd)
cor(dd)
cor(dd$sulfate, dd$nitrate)
?cor
cor <- sapply(dd, cor, x=dd$nitrate, y=dd$sulfate)
cor(dd$sulfate[1,], dd$nitrate[1,])
cor(dd$sulfate[1], dd$nitrate[1])
x <- dd$sulfate[1]
xx
x
cor($nitrate[1])
cor(dd$nitrate[1])
y<-dd$nitrate[1]
y
cor(x,y)
source("air_poll.R")
corr
corr()
list.files("specdata/")
files <- list.files("specdata/")
v1 <- sapply(files, read.csv)
v1 <- sapply(files, fun(x) paste("specdata/", x ))
v1 <- sapply(files, function(x) paste("specdata/", x ))
head(v1)
v1 <- sapply(files, function(x) paste("specdata/", x, sep="" ))
head( v1)
read.csv("specdata/*")
files <- list.files("", pattern=".csv")
head(fiels)
head(files)
?list2env
?gsub
?list.files
files <- list.files(pattern=".csv", full.names=TRUE)
head(files)
files <- list.files("specdata/", pattern=".csv", full.names=TRUE)
head(files)
head(sapply(files, read.csv))
lapply(files, read.csv)
v1 <- lapply(files, read.csv)
head(v1)
View(v1)
sapply(v1, fun(x), print(x))
sapply(v1, function(x), print(x))
sapply(v1, function(x) print(x))
View(v1)
sapply(v1, function(x) cor(x$nitrate, x$sulphate))
sapply(v1, function(x) cor(x=i$nitrate, x=i$sulphate))
sapply(v1, function(i) cor(x=i$nitrate, x=i$sulphate))
sapply(v1, cor(v1))
?vapply
?tapply
sapply(v1, function(x) cor(x$sulfate, x$nitrate))
?cor
sapply(v1, function(x) cor(x$sulfate, x$nitrate, use="complete.obs"))
lapply(v1, complete.cases)
v2 <- lapply(v1, complete.cases)
head(v2)
v1[v2]
v2 <- v1[complete.cases,]
v2 <- v1[complete.cases(),]
v2 <- v1[complete.cases(v1),]
sapply(v1, function(x) cor(x$sulfate, x$nitrate, use="complete.obs"))
sapply(v1, function(x) cor(x$sulfate, x$nitrate, na.rm=T))
source("air_poll.R")
source("air_poll.R")
poll_mean()
corr()
source("air_poll.R")
cor()
cor()
corr()
files <- list.files("specdata/", pattern=".csv", full.names=T)
for(file in files){}
for(file in files){print(file)}
for(file in files){
cur <- read.csv(file)
if(sum(complete.cases(cur))<400){next()}
new <- cor(cur$sulfate, cur$nitrate, na.rm=T)
cor_vec <- c(cor_vec, new)
}
new <- cor(cur$sulfate, cur$nitrate)
cur
cur_vec
funct <- function(){}
funct <- function(){
for(ii in files){
cur <- read.csv(ii)
if(sum(complete.cases(cur))<400){
next()
}
cur <- cur[complete.cases(cur), ]
new <- cor(cur$sulfate, cur$nitrate)
ret <- c(ret, new)
}
}
funct()
ret <- 0
funct()
ret
View(funct)
source("air_poll.R")
corr()
source("air_poll.R")
corr()
source("air_poll.R")
corr()
source("air_poll.R")
corr()
source("air_poll.R")
corr()
source("air_poll.R")
corr()
source("ari")
source("air_poll.R")
corr()
source("air_poll.R")
corr()
source9"a"
source("air_poll.R")
corr()
source("air_poll.R")
corr()
source("air_poll.R")
lasdkfa
warning(lskdjfsajlgka)
corr()
source("air_poll.R")
corr()
head(corr())
source("air_poll.R")
head(corr())
pollutantmean("specdata", "sulfate", 1:10)
poll_mean("specdata", "sulfate", 1:10)
pollutantmean <- poll_mean
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate", 1:332)
source("air_poll.R")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
source("air_poll.R")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
cc <- complete("specdata", 54)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
cc[use]
str(complete)
str(cc)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "num"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
source("air_poll.R")
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5, replace=TRUE)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
\cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
corr <- function(directory, threshold = 0) {
# Reading in all files and making a large data.table
lst <- lapply(file.path(directory, list.files(path = directory, pattern="*.csv")), data.table::fread)
dt <- rbindlist(lst)
# Only keep completely observed cases
dt <- dt[complete.cases(dt),]
# Apply threshold
dt <- dt[, .(nobs = .N, corr = cor(x = sulfate, y = nitrate)), by = ID][nobs > threshold]
return(dt[, corr])
}
# Example Usage
corr(directory = '~/Desktop/specdata', threshold = 150)
library(data.table)
corr <- function(directory, threshold = 0) {
# Reading in all files and making a large data.table
lst <- lapply(file.path(directory, list.files(path = directory, pattern="*.csv")), data.table::fread)
dt <- rbindlist(lst)
# Only keep completely observed cases
dt <- dt[complete.cases(dt),]
# Apply threshold
dt <- dt[, .(nobs = .N, corr = cor(x = sulfate, y = nitrate)), by = ID][nobs > threshold]
return(dt[, corr])
}
# Example Usage
corr(directory = '~/Desktop/specdata', threshold = 150)
corr <- function(directory, threshold = 0) {
# Reading in all files and making a large data.table
lst <- lapply(file.path(directory, list.files(path = directory, pattern="*.csv")), data.table::fread)
dt <- rbindlist(lst)
# Only keep completely observed cases
dt <- dt[complete.cases(dt),]
# Apply threshold
dt <- dt[, .(nobs = .N, corr = cor(x = sulfate, y = nitrate)), by = ID][nobs > threshold]
return(dt[, corr])
}
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
